package Project_Pkg;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class Do_Prediction {
	public static void main(String [] args){
		//next need to use fpgrowth tool to generate the rules
		String pkg_path = "/Users/Jason/Documents/workspace/Project_Final/";//the package for the files
		String doc_path = pkg_path+"src/Project_Pkg/DocumentWords.txt";//Document.txt
		String rules = pkg_path+"src/Project_Pkg/output.txt";//rules generated by fpgrowth tool
		String sorted_rules = pkg_path+"Sorted Association Rules.txt";//sorted rules
		String target= doc_path;
		try{
			sort_by_conf(rules);
			match_target(sorted_rules,target);
		} catch(Exception e){
			e.printStackTrace();
			System.out.println("ERROR in Prediction");
		}
	}
	
	//doing prediction and output the result
	public static void match_target(String rules, String target) throws Exception{
		System.out.println("Prediction Start");
		ArrayList<ArrayList<String>> rls=get_rules(rules);
		String sCurrentLine;
		BufferedReader br = new BufferedReader(new FileReader(target));
		File f = new File("Final Result.txt");
		BufferedWriter out=new BufferedWriter(new FileWriter(f, true));
		while((sCurrentLine=br.readLine())!=null){
			String temp=sCurrentLine;
			String [] arr=temp.split(",");
			String id=arr[0];
			int size = Integer.parseInt(arr[1]);
			ArrayList<String> t=new ArrayList<String>();
			for(int i=2;i<arr.length;i++){
				t.add(arr[i]);
			}
			if(t.size()!=size){
				System.out.println("Size Error");
			}
			out.write(id+",");
			ArrayList<String> w=new ArrayList<String>();
			for(int i=0;i<rls.size();i++){
				ArrayList<String> a=rls.get(i);
				if(is_contain(t,a)&&w.size()<6&&!w.contains(a.get(0))){
					w.add(a.get(0));
				}
			}	
			if(w.size()<5){
				System.out.println("Error: not enough source data");
			}
			for(int i=0;i<w.size();i++){
				if(i==w.size()-1){
					out.write(w.get(i)+"\n");
				}else{
					out.write(w.get(i)+",");
				}
			}
		}	
		System.out.println("Prediction Done");
		br.close();	
		out.close();
	}
	
	//return whether the target file list contains the rule words and return false if the target file has the predicted word
	public static boolean is_contain(ArrayList<String> t, ArrayList<String> r){
		for(int i=1;i<r.size();i++){
			if(!t.contains(r.get(i))){
				return false;
			}
		}
		if(t.contains(r.get(0))){
			return false;
		}
		return true;
	}
	
	//return the double embeded arraylist storing the rules from the sorted association rule file
	public static ArrayList<ArrayList<String>> get_rules(String rules) throws Exception{
		ArrayList<ArrayList<String>> result=new ArrayList<ArrayList<String>>();
		String sCurrentLine;
		BufferedReader br = new BufferedReader(new FileReader(rules));
		while ((sCurrentLine = br.readLine()) != null) {
			String temp=sCurrentLine.split("\\(")[0];
			String value=temp.split(" <- ")[0];
			String k=temp.split(" <- ")[1];
			String [] a=k.split(" ");
			ArrayList<String> key=new ArrayList<String>();
			key.add(value);
			for(int i=0;i<a.length;i++){
				key.add(a[i]);
			}
			result.add(key);
		}
		br.close();
		return result;
	}
	
	//return the String array of rules sorted according to the confidence of the rule
	public static String [] sort_rules(ArrayList<Double> d, ArrayList<String> s){
		Double[] t=d.toArray(new Double[d.size()]);
		String[] r=s.toArray(new String[s.size()]);
		double temp =0.0;
		String tmp="";
		for (int i = 1; i < t.length; i++) {
			for(int j = i ; j > 0 ; j--){
				if(t[j] > t[j-1]){
					temp = t[j];
					t[j]=t[j-1];
					t[j-1]=temp;
					tmp= r[j];
					r[j]=r[j-1];
					r[j-1]=tmp;
		         }
		     }
		}
		return r;
	}

	//create a new file with sorted rules
	public static void sort_by_conf(String file_path){
		System.out.println("Sort Rules Start");
		ArrayList<Double> db=new ArrayList<Double>();
		ArrayList<String> str=new ArrayList<String>();
		try {
			String sCurrentLine;
			File f = new File("Sorted Association Rules.txt");
			BufferedWriter out=new BufferedWriter(new FileWriter(f, true));
			BufferedReader br = new BufferedReader(new FileReader(file_path));
			while ((sCurrentLine = br.readLine()) != null) {
				String temp = sCurrentLine;
				String t=temp.split(",")[1].toString();
				String x=t.split(" ")[1];
				String y=x.substring(0, x.length()-1);
				Double flt=Double.parseDouble(y);
				db.add(flt);
				str.add(temp);
			}
			String [] sorted = sort_rules(db,str);
//			System.out.println(sorted.length==db.size());
			for(int i=0;i<sorted.length;i++){
				out.write(sorted[i]+"\n");
			}
			System.out.println("Sort Rules Done");
			out.close();
			br.close();
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
}
